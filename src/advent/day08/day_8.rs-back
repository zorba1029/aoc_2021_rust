// advent/day_8.rs
use std::fs::File;
use std::io::BufReader;
use std::io::prelude::*;
use std::collections::*;

///////////////////////////////////////////
//--- Day 8: Seven Segment Search ---
///////////////////////////////////////////
//-----------------------------------------
//   0:      1:      2:      3:      4:
//  aaaa    ....    aaaa    aaaa    ....
// b    c  .    c  .    c  .    c  b    c
// b    c  .    c  .    c  .    c  b    c
//  ....    ....    dddd    dddd    dddd
// e    f  .    f  e    .  .    f  .    f
// e    f  .    f  e    .  .    f  .    f
//  gggg    ....    gggg    gggg    ....
//
//   5:      6:      7:      8:      9:
//  aaaa    aaaa    aaaa    aaaa    aaaa
// b    .  b    .  .    c  b    c  b    c
// b    .  b    .  .    c  b    c  b    c
//  dddd    dddd    ....    dddd    dddd
// .    f  e    f  .    f  e    f  .    f
// .    f  e    f  .    f  e    f  .    f
//  gggg    gggg    ....    gggg    gggg
//------------------------------------------

pub fn do_day_8() {
    day_8_part_one();
    day_8_part_two();
}

fn handle_input(filename: &str) -> Vec<(Vec<String>,Vec<String>)> {
    let file = File::open(filename).expect("Couldn't open input");
    let buf = BufReader::new(file);
    let lines = buf.lines()
        .map(|line| line.unwrap())
        .collect::<Vec<String>>();

    let lines_count = lines.len();
    println!("[*] Input Filename: {}", filename);
    println!("[*] input lines count = {}", lines_count);

    // let first_line = &lines[0];
    // println!("[ ] First Line: {}", first_line);

    let input_lines = lines.iter()
        .map(|line| line.split('|').collect::<Vec<_>>())
        .map(|items| {
            let left = items[0].trim().split_whitespace().map(str::to_string).collect::<Vec<_>>();
            let right = items[1].trim().split_whitespace().map(str::to_string).collect::<Vec<_>>();
            // println!(" {:?} | {:?}", left, right);
            (left, right)
        })
        .collect::<Vec<(Vec<_>,Vec<_>)>>();

    // input_lines.iter()
    //     .for_each(|line| println!(" {:?} \n    | {:?}", line.0, line.1));
    input_lines
}


fn day_8_part_one() {
    println!("===============================================");
    println!("---Day 8: Seven Segment Search, Part One ---, 1/11/2022 ==> DONE");
    println!("===============================================");
    // let filename = "input/day_8-sample.txt";
    let filename = "input/day_8-input.txt";
    let input_lines = handle_input(filename);
    input_lines.iter().enumerate()
        .for_each(|(index, line)| println!("[{}] {:?} \n    | {:?}", index, line.0, line.1));
    println!("input_lines: {:?}", input_lines.len());
    
    let right_lines = input_lines.iter()
        .map(|line| line.1.clone())
        .collect::<Vec<_>>();

    // right_lines.iter()
    //     .for_each(|line| println!(" | {:?}", line));

    let output_value = right_lines.iter()
        .fold(0, |acc, line| {
            // let mut count = 0;
            // line.iter().for_each(|item| {
            //     let item_len = item.len();
            //     if item_len == 2 || item_len == 3 || item_len == 4 || item_len == 7 {
            //         count += 1;
            //     } 
            // });
            // acc + count
            let count = line.iter().fold(0, |cnt, item| {
                let item_len = item.len();
                match item_len {
                    2 | 3 | 4 | 7 => cnt + 1,
                    _ => cnt
                }
            });
            acc + count
        });
   
    println!("-----------------------------------------------");
    println!("output_value (count of 1, 4, 7, 8 digits): {:?}", output_value);
    println!("-----------------------------------------------");
}

// output ----------------------------------------
// for input:  "input/day_8-input.txt";
// output_value (count of 1, 4, 7, 8 digits): 26
//------------------------------------------------

// output ----------------------------------------
// for input:  "input/day_8-input.txt";
// output_value (count of 1, 4, 7, 8 digits): 381
//------------------------------------------------


fn day_8_part_two() {
    println!("===============================================");
    println!("---Day 8: Seven Segment Search, Part Two ---, 1/16/2022 ==> DONE");
    println!("===============================================");
    // let filename = "input/day_8-sample.txt";
    let filename = "input/day_8-input.txt";
    let input_lines = handle_input(filename);
    // input_lines.iter().enumerate()
    //     .for_each(|(index, line)| println!("[{}] {:?} \n    | {:?}", index, line.0, line.1));
    println!("input_lines: {:?}", input_lines.len());

    // let (A, B, C, D, E, F, G) = (0, 1, 2, 3, 4, 5, 6);
    let bitmap_template = make_bitmap_template();

    let output_value_list = input_lines.iter().enumerate()
        .map(|(index, (left, right))| {
            println!("[{}] -------------------------------------------------", index);
            // println!("  [input_line]: {:?} | ", left);
            println!("[*] {:?} \n  | {:?} ", left, right);

            let seven_digit_template = make_digit_template(&left);
            println!("[*] digit_template - {:?}", seven_digit_template);

            let mut char_to_digit_map: HashMap<char, u8> = HashMap::new();
            seven_digit_template.iter().enumerate().for_each(|(i,c)| {
                char_to_digit_map.insert(*c as char, i as u8);
            });

            //-- one digit for one word
            let output_digit_vec = parse_each_right_line(right, &char_to_digit_map, &bitmap_template);
            output_digit_vec
        })
        .collect::<Vec<Vec<u8>>>();

    let output_number_list = output_value_list.iter()
        .map(|line| {
            let output_number = line.iter().rev().enumerate()
                .fold(0, |acc, (i, v)| {
                    let tmp = (*v as u32) * (10_i32.pow(i as u32) as u32);
                    acc + tmp
                });
            output_number as i32
        })
        .collect::<Vec<i32>>();

    println!("-----------------------------------------------");
    let total_sum: i32 = output_number_list.iter().sum();      //--fold(0, |acc, v| acc + v );
    println!("[**] total_sum: {} (lines: {})", total_sum, input_lines.len());
    println!("-----------------------------------------------");
}

// output ---------------------------------------
//-- for input: input/day_8-sample.txt
// -----------------------------------------------
// [**] total_sum: 61229 (lines: 10)
// -----------------------------------------------

// output ---------------------------------------
//-- for input: input/day_8-input.txt
// -----------------------------------------------
// [**] total_sum: 1023686 (lines: 200) <-- CORRECT
// -----------------------------------------------

fn parse_each_right_line(right: &Vec<String>, digit_map: &HashMap<char, u8>, bitmap_template: &Vec<u8>)
    ->  Vec<u8> {
    let output_value_vec = right.iter().map(|word| -> u8 {
        match word.len() {
            2 => 1,
            3 => 7,
            4 => 4,
            5 => { // 5: ->  (2, 3, 5),
                let output_value = parse_word_len_five_or_six(&word, &digit_map, &bitmap_template);
                output_value
            },
            6 => { // 6: ->  (0, 6, 9),
                let output_value = parse_word_len_five_or_six(&word, &digit_map, &bitmap_template);
                output_value
            },
            7 => 8,
            _ => {
                // this case must not happen -> should be panic
                0
            }
        }
    })
    .collect::<Vec<u8>>();

    //-->> debug print
    let output_number = output_value_vec.iter().rev().enumerate()
            .fold(0, |acc, (i, v)| {
            let tmp = (*v as u32) * (10_i32.pow(i as u32) as u32);
            acc + tmp
        });
    println!("[*] {:?} => ({}) {:?}", right, output_number, output_value_vec);
    //<<-- debug print
    output_value_vec
}

fn parse_word_len_five_or_six(word: &String, digit_map: &HashMap<char, u8>, bitmap_template: &Vec<u8>) -> u8 {
    let chars_vec = word.chars().collect::<Vec<_>>();
    let bitmap = chars_vec.iter().enumerate().fold(0,|acc_bitmap, (_i, c)| {
        let v = digit_map.get(c).unwrap();
        // println!("word.len() == {}, i:{}, ==> c:[{}], v:{}", word.len(),  i, c, v);
        let result = acc_bitmap | (1u8 << (6 - v));
        // println!("word.len() == {}, i:{}, c:[{}] ==> {:#010b} ({})", word.len(), i, c, result, result);

        result
    });
    // println!("word.len() == {}, {} ==> {:#010b}, dec: {}", word.len(),word, bitmap, bitmap);

    let mut output_value = 0;
    for (k,v) in bitmap_template.iter().enumerate() {
        if *v == bitmap {
            output_value = k as u8;
            break;
        }
    }
    println!("  - parse(|{}|(={})) -> {}", word, word.len(), output_value);
    output_value
}

//-------------------------------------------
//-- added 2022/1/31
//-- use Segment Name as enum and use its variants(A,...,G) as Vector index
// [A B C D E F G]
// [0 1 2 3 4 5 6]
// let (A, B, C, D, E, F, G) = (0, 1, 2, 3, 4, 5, 6);
// instead of the above constants, 
// use the below enum SegmentName
#[derive(PartialEq, Eq, Hash, Copy, Clone)]
enum SegmentName {
    A = 0,
    B,
    C,
    D,
    E,
    F,
    G,
}

// add index operator for Vector so that we can use enum variant as index for Vector
impl<T> std::ops::Index<SegmentName> for Vec<T> {
    type Output = T;
    fn index(&self, seg: SegmentName) -> &T {
        &self[seg as usize]
    }
}

impl<T> std::ops::IndexMut<SegmentName> for Vec<T> {
    fn index_mut(&mut self, seg: SegmentName) -> &mut T {
        &mut self[seg as usize]
    }
}
// <-------------------------------------

fn make_digit_template(left: &Vec<String>) -> Vec<char> {
    // [A B C D E F G]
    // [0 1 2 3 4 5 6]
    // let (A, B, C, D, E, F, G) = (0, 1, 2, 3, 4, 5, 6);
    //-- use the above  enum SegmentName
    //-- use Vector<char> instead of array - vec![' '; 7] instead of [' '; 7]
    let mut digit_template = vec![' '; 7];

    let mut sorted_left = left.clone();
    sorted_left.sort_by_key(|a| a.len());

    // println!("sorted-left input: {:?}", sorted_left);
    //-----------------------------------------------------------
    //-- len 2 -> 1 one
    let len2 = sorted_left.iter()
        .filter(|word| word.len() == 2)
        .collect::<Vec<_>>();
    let len2 = len2.first().unwrap();
    digit_template[SegmentName::C] = len2.chars().nth(0).unwrap();
    digit_template[SegmentName::F] = len2.chars().nth(1).unwrap();
    // println!("  len 2: 1 one -  {:?}", len2);
    // println!("  len 2 (1): digit_template -  {:?}", digit_template);

    //-----------------------------------------------------------
    //-- len 3 -> 7 seven
    let len3 = sorted_left.iter()
        .filter(|word| word.len() == 3)
        .collect::<Vec<_>>();
    let word_str = len3.first().unwrap();
    word_str.chars().enumerate().for_each(|(_i, v)| {
        if v != digit_template[SegmentName::C] && v != digit_template[SegmentName::F] {
            digit_template[SegmentName::A] = v;
        }
    });
    // println!("  len 3: 7 seven - {}", word_str);
    // println!("  len 3 (7): digit_template -  {:?}", digit_template);

    //-----------------------------------------------------------
    //-- len 4 -> 4 four
    let len4 = sorted_left.iter()
        .filter(|word| word.len() == 4)
        .collect::<Vec<_>>();
    let word_str = len4.first().unwrap();
    word_str.chars().enumerate().for_each(|(_i, v)| {
        if v == digit_template[SegmentName::C] || v == digit_template[SegmentName::F] {
            return;
        }
        if digit_template[SegmentName::B] == ' ' {
            digit_template[SegmentName::B] = v;
        } else {
            digit_template[SegmentName::D] = v;
        }
    });
    // println!("  len 4: 4 four - {}", word_str);
    // println!("  len 4 (4): digit_template -  {:?}", digit_template);

    //-----------------------------------------------------------
    //-- len 5 -> one of (2 two, 3 three, 5 five)
    let len5_list = sorted_left.iter()
        .filter(|word| word.len() == 5)
        .collect::<Vec<_>>();

    let three_common_chars = |list: &Vec<&String>| -> Vec<char> {
        let first_list = list[0].to_string();
        let second_list = list[1].to_string();
        let third_list = list[2].to_string();
        let mut common_chars = Vec::new();

        first_list.chars().for_each(|c| {
            if second_list.contains(c) && third_list.contains(c) {
                // println!("len 5: : contains({}), {:?}, {:?}", c, second_list, third_list);
                common_chars.push(c);
            }
        });
        common_chars
    };

    let comm_3_chars = three_common_chars(&len5_list);
    // println!("len 5: 3 list: {:?}", len5_list);
    // println!("  len 5 (2,3,5): 3-len common chars: {:?}", comm_3_chars);

    //-----------------------------------------------------------
    //-- swap B and D value if necessary upon comm_3_chars check
    let double_check_b_d_position = |digit_template: &mut Vec<char>, comm_3_chars: &Vec<char>| {
        // let (*A, B, C, *D, E, F, *G) = (*0, 1, 2, *3, 4, 5, *6);
        if comm_3_chars.contains(&digit_template[SegmentName::D]) != true {
            let temp = digit_template[SegmentName::D];
            digit_template[SegmentName::D] = digit_template[SegmentName::B];
            digit_template[SegmentName::B] = temp;
        }
    };
    double_check_b_d_position(&mut digit_template, &comm_3_chars);

    let find_g_pos_char = |comm_3_chars: &Vec<char>| -> char {
        let mut g_char = ' ';
        comm_3_chars.iter().for_each(|c| {
            if digit_template.contains(c) != true {
                g_char = *c;
            }
        });
        g_char
    };

    let g_position_char = find_g_pos_char(&comm_3_chars);
    digit_template[SegmentName::G] = g_position_char;
    // println!("len 5: g_position_char -  {}", g_position_char);
    // println!("len 5 (2,3,5): digit_template -  {:?}", digit_template);

    let find_e_pos_char = |len5_list: &Vec<&String>| -> char {
        let mut e_char = ' ';
        len5_list.iter().for_each(|word| {
            word.chars().for_each(|c| {
                if digit_template.contains(&c) != true {
                    e_char = c;
                }
            });
        });
        e_char
    };

    // println!("-- BEFORE e_position: {:?}", digit_template);
    let e_position_char = find_e_pos_char(&len5_list);
    digit_template[SegmentName::E] = e_position_char;
    // println!("len 5: e_position_char -  {}", e_position_char);
    // println!("    -- AFTER  e_position: {:?}", digit_template);

    // println!("    -- before len = 6, {:?}", digit_template);
    //-----------------------------------------------------------
    // -- len 6 -> one of (0 zero, 6 six, 9 nine)
    let len6_list = sorted_left.iter()
        .filter(|word| word.len() == 6).collect::<Vec<_>>();

    //-- adjust/swap template[C] and template[F]
    // in word.len()==6 chars(0,6,9), template[C] must be found 2 times (in 0, 9)
    // and template[F] must be 3 times (0, 6, 9),
    // Otherwise, template[C] and template[F] must be swapped
    let mut found_c_pos_count = 0;
    len6_list.iter().for_each(|word| {
        // println!("    -- word.len = 6; {}", word);
        if word.contains(digit_template[SegmentName::C]) {
            found_c_pos_count += 1;
        }
    });

    if found_c_pos_count != 2 {
        let tmp = digit_template[SegmentName::C];
        digit_template[SegmentName::C] = digit_template[SegmentName::F];
        digit_template[SegmentName::F] = tmp;
    }

    //-----------------------------------------------------------
    // println!("    final [digit_template] -  {:?}", digit_template);
    let d_template = digit_template.to_vec();
    d_template
}

fn make_bitmap_template() -> Vec<u8> {
    //     //-- 2 chars
    //     one = 0b00010010u8;
    //     //-- 3 chars
    //     four = 0b0111010u8;
    //     //-- 4 chars
    //     seven = 0b01010010u8;
    //
    //     //-- 5 chars: 2, 3, 5
    //     two = 0b01011101u8;
    //     three = 0b01011011u8;
    //     five = 0b01101011u8;
    //
    //     //-- 6 chars: 0, 6, 9
    //     zero = 0b01110111u8;
    //     six = 0b01101111u8;
    //     nine = 0b01111011u8;
    //
    //     //-- 0, 8
    //     zero = 0b01110111u8;
    //     eight = 0b01111111u8;
    let zero = 0b01110111u8;
    let one = 0b0111010u8;
    let two = 0b01011101u8;
    let three = 0b01011011u8;
    let four = 0b0111010u8;
    let five = 0b01101011u8;
    let six = 0b01101111u8;
    let seven = 0b01010010u8;
    let eight = 0b01111111u8;
    let nine = 0b01111011u8;
    
    let bitmap_template: Vec<u8> = vec![zero, one, two, three, four, five, six, seven, eight, nine];

    // println!("   bitmap:      [ABCDEGF]");
    // bitmap_template.iter().enumerate()
    //     .for_each(|(i,bitmap)| println!("   bitmap[{}]: {:#010b} ({})", i, bitmap, bitmap));

    bitmap_template
}
